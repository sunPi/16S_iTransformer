#/bin/bash
set -euo pipefail

verbose="F"
. ~/bioinf-tools/bin/utils

# --- Help Function
usage()
{
   # Display Help
   separator_line "Run 16S Transformer Training Pipeline"
   echo "                usage:                                                             "
   echo "                example:                                                           "
   echo "                                  -f       Path to the 16S RNA fasta file.         "
   echo "                                  -n       Maximum number of sequences to process. "
   echo "                                  -l       Maximum length of sequences to process. "
   echo "                                  -t       Specify which training algorithm to use. [Options: 'itransformer', 'xgb', 'graph']"
   echo "                                  -i       Specify if incremental learning is using class native or expansion. [Options: 'native', 'expansion']"
   echo "                                  -b       Specify the batch size for training. [Default: None]"
   echo "                                  -c       Specify to train on a specific taxonomy. [Options: 'kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species']"
   echo "                                  -V       Prints out the tool version.            "
   echo "                                  -h       Print this Help.                        "
   echo "                                                                                                        "
   separator_line
}

# Initialize variables
# outfolder="NULL"

while getopts ":hf:n:l:t:b:c:V" flag;
do
    case "${flag}" in
        h) # Display Help Function
              usage
              exit;;
        f)
              FASTA=${OPTARG}
        ;;
        n)
              N_MAX=${OPTARG}
        ;;
        l)
              MAX_LENGTH=${OPTARG}
        ;;
        t)
              TRAINING_ALGO=${OPTARG}
        ;;
        i)
              INCREMENTAL_TYPE=${OPTARG}
        ;; 
        b)
              BATCH_SIZE=${OPTARG}
        ;;
        c)
              TAXONOMY=${OPTARG}
        ;;
        V)
              version="version"
        echo $version
        ;;
        ?)
          echo "Error: Invalid option. Try '-h' to see a list of available options."
          exit;;
        *)
          usage
          exit;;
    esac
done

# ========================================
# Preprocess
# ========================================
# Get ROOT DIR
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Create a config file
# Write them into a plain text config
cat <<EOF > "$ROOT_DIR/config.cfg"
ROOT_DIR=$ROOT_DIR
EOF

# Define paths to scripts
process="$ROOT_DIR/python/process.py"
split="$ROOT_DIR/python/split.py"
gen_model_dir="$ROOT_DIR/python/generate_model_dir.py"
evaluate="$ROOT_DIR/python/evaluate.py"

# # Download SILVA 138.2 SSURef NR99 fasta file if not already present
# wget -P $ROOT_DIR/data/16S_RNA/ https://www.arb-silva.de/fileadmin/silva_databases/current/Exports/SILVA_138.2_SSURef_NR99_tax_silva.fasta.gz

# # Unzip the file if not already unzipped
# if [ ! -f "$ROOT_DIR/data/16S_RNA/SILVA_138.2_SSURef_NR99_tax_silva.fasta" ]; then
#     gunzip $ROOT_DIR/data/16S_RNA/SILVA_138.2_SSURef_NR99_tax_silva.fasta.gz
# fi

# Set default values if not provided
if [ -z "${N_MAX:-}" ]; then
    N_MAX=10000
    echo "No maximum number of sequences provided. Using default: $N_MAX"
fi

if [ -z "${MAX_LENGTH:-}" ]; then
    MAX_LENGTH=1600
    echo "No maximum sequence length provided. Using default: $MAX_LENGTH"
fi

if [ -z "${BATCH_SIZE:-}" ]; then
    BATCH_SIZE="None"
    BATCH="False"
    sldata_path="$ROOT_DIR/data/16S_RNA/singlelabel"

    echo "No batch size provided. Using default: $BATCH_SIZE"
else
    if [ "$TRAINING_ALGO" = "xgb" ]; then
        echo "XGBoost does not support batch training. Exiting pipeline..."
        exit 1
    fi
    sldata_path="$ROOT_DIR/data/16S_RNA/singlelabel/batches"
    BATCH="True"
fi

if [ -z "${TAXONOMY:-}" ]; then
    TAXONOMY="None"
    echo "No taxonomy level provided. Using all taxonomy levels."
else
    echo "Training on taxonomy level: $TAXONOMY"
fi

if [ "$TRAINING_ALGO" = "itransformer" ]; then 
    echo "Using iTransformer as the training algorithm."
    train="$ROOT_DIR/python/train_transformer.py"

elif [ "$TRAINING_ALGO" = "xgb" ]; then 
    echo "Using XGBoost as the training algorithm."
    train="$ROOT_DIR/python/train_XGB.py"

elif [ "$TRAINING_ALGO" = "graph" ]; then 
    echo "Using Graph Neural Network as the training algorithm."
    train="$ROOT_DIR/python/train_grapple.py"

else 
    TRAINING_ALGO="itransformer"
    echo "No valid training algorithm provided. Using default: $TRAINING_ALGO"
fi

# ========================================
# 1. Process FASTA files into training DFs
# ========================================

echo "Processing FASTA file..."

python3 $process -f $FASTA -n $N_MAX -l $MAX_LENGTH -c $TAXONOMY -b $BATCH_SIZE

# # ========================================
# # 2. Split files into train/test fractions
# # ========================================
# # Split single label data
echo "Splitting single label data..."

if [ "${BATCH:-}" = "False" ]; then
    for file in "$sldata_path"/*.pkl; do
        if [ -f "$file" ]; then
            echo "Processing $file..."
            python3 "$split" -f "$file" -b "$BATCH"
            echo "Done!"
        fi
    done
else
    echo "Processing batches in $sldata_path..."
    python3 "$split" -f "$sldata_path" -b "$BATCH"
    echo "Done!"
fi

# ========================================
# 3. Train using training DFs or batches
# ========================================
# Train single-label models
echo "Training single-label models..."


if [ "${BATCH:-}" = "False" ]; then
   for dir in "$sldata_path"/*; do
      if [ -d "$dir" ]; then
        for file in "$dir"/train/*.pkl; do
          if [ -f "$file" ]; then
            echo "Training on $file.."

            python3 "$train" -t "$file"
            MODEL_DIR=$(python3 "$gen_model_dir")
            python3 "$evaluate" -m "$MODEL_DIR"  

          fi
        done
      fi
    done
else
    echo "Training on batches in $sldata_path..."

    python3 "$train" -t "$sldata_path/" --batch_size "$BATCH_SIZE"
    MODEL_DIR=$(python3 "$gen_model_dir")
    python3 "$evaluate" -m "$MODEL_DIR"  
fi

    

# ========================================
# 4. (Optional) Class Expansion Incremental Learning
# ========================================
echo "Starting Class Expansion Incremental Learning..."

ilearn="$ROOT_DIR/python/train_increment.py"

if [ -z "${INCREMENTAL_TYPE:-}" ]; then
    echo "No incremental learning type provided. Skipping incremental learning step."
elif [ "$INCREMENTAL_TYPE" = "native" ]; then 
    echo "Using class native incremental learning."

    python3 "$ilearn" -t new_batch.pkl -m model.pth -l label_encoder.pkl -o updated_model

elif [ "$INCREMENTAL_TYPE" = "expansion" ]; then 
    echo "Using class expansion incremental learning."

    python3 "$ilearn" -t new_batch.pkl -m model.pth -l label_encoder.pkl -o updated_model -e

else 
    INCREMENTAL_TYPE="native"
    echo "No valid incremental learning type provided. Using default: $INCREMENTAL_TYPE"
fi


# CODE TO RECYCLE
# # Split multi-label data
# echo "Splitting multi-label data..."

# # mldata_path="$ROOT_DIR/data/16S_RNA/multilabel"

# # for file in "$mldata_path"/*; do
# #     if [ -f "$file" ]; then
# #         echo "Processing $file..."
# #         python3 "$split" -f "$file"
# #         echo "Done!"
# #     fi
# # done

# # echo "Training multi-label models..."

# # file="$mldata_path/silva_multilabel/train/*.pkl"

# # python3 "$train" -t $file -l "multi"
