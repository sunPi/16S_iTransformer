#/bin/bash

verbose="F"
. ~/bioinf-tools/bin/utils

# --- Help Function
usage()
{
   # Display Help
   separator_line "Run 16S Transformer Training Pipeline"
   echo "                usage:                                                             "
   echo "                example:                                                           "
   echo "                                  -f       Path to the 16S RNA fasta file.         "
   echo "                                  -n       Maximum number of sequences to process. "
   echo "                                  -l       Maximum length of sequences to process. "
   echo "                                  -V       Prints out the tool version.            "
   echo "                                  -h       Print this Help.                        "
   echo "                                                                                                        "
   separator_line
}

# Initialize variables
# outfolder="NULL"

while getopts ":hf:n:l:V" flag;
do
    case "${flag}" in
        h) # Display Help Function
              usage
              exit;;
        f)
              FASTA=${OPTARG}
        ;;
        n)
              N_MAX=${OPTARG}
        ;;
        l)
              MAX_LENGTH=${OPTARG}
        ;;
        V)
              version="version"
        echo $version
        ;;
        ?)
          echo "Error: Invalid option. Try '-h' to see a list of available options."
          exit;;
        *)
          usage
          exit;;
    esac
done

# ========================================
# Preprocess
# ========================================
# Get ROOT DIR
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Create a config file
# Write them into a plain text config
cat <<EOF > "$ROOT_DIR/config.cfg"
ROOT_DIR=$ROOT_DIR
EOF

# Define paths to scripts
process="$ROOT_DIR/python/process.py"
split="$ROOT_DIR/python/split.py"
train="$ROOT_DIR/python/train_transformer.py"
gen_model_dir="$ROOT_DIR/python/generate_model_dir.py"
evaluate="$ROOT_DIR/python/evaluate.py"

# # Download SILVA 138.2 SSURef NR99 fasta file if not already present
# wget -P $ROOT_DIR/data/16S_RNA/ https://www.arb-silva.de/fileadmin/silva_databases/current/Exports/SILVA_138.2_SSURef_NR99_tax_silva.fasta.gz

# # Unzip the file if not already unzipped
# if [ ! -f "$ROOT_DIR/data/16S_RNA/SILVA_138.2_SSURef_NR99_tax_silva.fasta" ]; then
#     gunzip $ROOT_DIR/data/16S_RNA/SILVA_138.2_SSURef_NR99_tax_silva.fasta.gz
# fi

# Set default values if not provided
if [ -z "$N_MAX" ]; then
    N_MAX=10000
    echo "No maximum number of sequences provided. Using default: $N_MAX"
fi

if [ -z "$MAX_LENGTH" ]; then
    MAX_LENGTH=1600
    echo "No maximum sequence length provided. Using default: $MAX_LENGTH"
fi

# ========================================
# 1. Process FASTA files into training DFs
# ========================================

echo "Processing FASTA file..."
python3 $process -f $FASTA -n $N_MAX -l $MAX_LENGTH

# # ========================================
# # 2. Split files into train/test fractions
# # ========================================
# # Split single label data
echo "Splitting single label data..."

sldata_path="$ROOT_DIR/data/16S_RNA/singlelabel"

for file in "$sldata_path"/*; do
    if [ -f "$file" ]; then
        echo "Processing $file..."
        python3 "$split" -f "$file"
        echo "Done!"
    fi
done

# # ========================================
# # 3. Train using training DFs
# # ========================================
# Train single-label models
echo "Training single-label models..."

sldata_path="$ROOT_DIR/data/16S_RNA/singlelabel"

for dir in "$sldata_path"/*; do
  if [ -d "$dir" ]; then
    for file in "$dir"/train/*.pkl; do
      if [ -f "$file" ]; then
        echo "Training on $file.."
        # Your commands here, e.g. python3 "$train" -t "$file"
        python3 "$train" -t "$file" -l "single"
        MODEL_DIR=$(python3 "$gen_model_dir")

        python3 "$evaluate" -m "$MODEL_DIR"
      fi
    done
  fi
done




# CODE TO RECYCLE
# # Split multi-label data
# echo "Splitting multi-label data..."

# # mldata_path="$ROOT_DIR/data/16S_RNA/multilabel"

# # for file in "$mldata_path"/*; do
# #     if [ -f "$file" ]; then
# #         echo "Processing $file..."
# #         python3 "$split" -f "$file"
# #         echo "Done!"
# #     fi
# # done

# # echo "Training multi-label models..."

# # file="$mldata_path/silva_multilabel/train/*.pkl"

# # python3 "$train" -t $file -l "multi"